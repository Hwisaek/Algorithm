def solution(n, m, c, d, map):
    # n: 세로 크기, m: 가로 크기, c: 캐릭터의 좌표, d: 바라보는 방향, map: 지형 정보
    # map - 0: 육지
    #     - 1: 바다
    answer = 0

    # 0, 1, 2, 3 = 북, 동, 남, 서
    step = {0: [-1, 0], 1: [0, 1], 2: [1, 0], 3: [0, -1]}

    d = int(d)

    count = 0  # 회전 횟수

    # 1. 현재 방향 기준 왼쪽 부터 탐험
    # 2. 왼쪽이 미방문칸이면 왼쪽으로 회전 후 전진. 방문칸이면 왼쪽으로 회전만 함.
    # 3. 네 방향 모두 가본 칸이거나 바다인 경우에는 바라보는 방향 유지 후 뒤로 이동. 뒤가 바다인 경우 정지.
    # 4. 방문한 칸 수를 출력

    # 시작 칸 방문
    map[c[0]][c[1]] = 1
    answer += 1
    while True:
        # 왼쪽으로 회전
        d -= 1
        if d == -1:
            d = 3

        # 왼쪽 칸이 미방문 칸이면 전진
        if map[c[0] + step[d][0]][c[1] + step[d][1]] == 0:
            c[0] += step[d][0]
            c[1] += step[d][1]
            map[c[0]][c[1]] = 1
            count = 0
            answer += 1
        else:
            count += 1

        # 네 방향 모두 가본 칸이거나 바다인 경우 뒤로 이동
        if count == 4:
            # 뒤가 바다인 경우 움직임 멈춤
            if map[c[0] - step[d][0]][c[1] - step[d][1]] == 1:
                break

            c[0] -= step[d][0]
            c[1] -= step[d][1]
            count = 0

    return answer


print(solution(4, 4, [1, 1], 0, [[1, 1, 1, 1],
                                 [1, 0, 0, 1],
                                 [1, 1, 0, 1],
                                 [1, 1, 1, 1]]))
